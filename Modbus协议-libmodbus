modbus协议是应用于电子控制器上的一种通用语言，通过此协议，控制器之间，控制器经由网络（例如以太网）和其他设备之间可以通信。它已经是一种通用工业标准。
有了它，不同厂商的控制设备可以连接成工业网络，进行集中监控。此协议定义了一个控制器能认识使用的消息结构，而不管它们是经过何种网络进行通信的。他描述了一个
控制器请求访问其他设备的过程，如何回应来自其他设备的请求，以及怎样侦测错误并记录。它制定了消息域格局和内容的公共格式。
当在同一Modbus网络上通信时，此协议决定了每个控制器需要知道它们的设备地址，识别按地址发来的消息，决定要产生何种行动。如果需要回应，控制器将生成反馈
信息并用Modbus协议发出。在其它网络上，包含了Modbus协议的消息转换为在此网络上使用的帧或包结构。这种转换也扩展了根据具体的网络解决节地址、路由路径及
错误检测的方法。此协议支持传统的RS-232、RS-422、RS-485和以太网设备。许多工业设备，包括PLC，DCS，智能仪表等都在使用Modbus协议作为他们之间的通信标准
——————————*********************************************************************************************************-----------
学习网址：
https://blog.csdn.net/yoyo18520/article/details/79113700
https://blog.csdn.net/bijinsong/article/details/79373621
https://www.imooc.com/article/261780?block_id=tuijian_wz
https://blog.csdn.net/u012351051/article/details/89194839
协议中文翻译：
https://blog.csdn.net/qq_23670601/article/details/82155378#%E6%BA%90%E6%96%87%E6%A1%A3libmodbus
****************************************************************************************************
libmodbus协议栈1：生成modbus库文件：https://blog.csdn.net/u012351051/article/details/89185837



****************************************************************************************************


modbus中寄存器的理解：

modbus支持的功能码：
      0x01 读线圈寄存器
      0x02 读离散输入寄存器
      0x03 读保持寄存器
      0x04 读输入寄存器
      0x05 写单个线圈寄存器
      0x06 写单个保持寄存器
      0x0f 写多个线圈寄存器
      0x10 写多个保持寄存器
四种寄存器的解释：
      线圈寄存器：实际上可以类比为开关量，每一个bit都对应一个人信号的开关状态。所以一个byte就可以控制8路的信号。比如控制外部8路io的高低。
      线圈寄存器支持读也支持写，写在功能码里又分为写单个寄存器和写多个线圈寄存器。对应上面的功能满是：0x01 0x 05 0x0f
      
      离散寄存器：线圈的只读模式 0x02
      
      保持寄存器：这个寄存器的单位不再是Bit而是两个bit, 也就是可以存放具体的数据量，并且是可读写的
      比如我我设置时间年月日，不但可以写也可以读出来现在的时间。写也分为单个写和多个写，所以功能码有对应的三个：0x03 0x06 0x10
      
      输入寄存器:与保持寄存器类似，但是只支持读不支持写，一个寄存器也占两个bit的空间。功能码：0x04
**********************

libmodbus函数说明

*********************************************初始化与释放*********************************************
modbus_t *modbus_new_tcp(const char *ip, int port);
/*以TCP的方式创建libmodbus实例 char *ip:连接*p地址 int port:连接的IP端口；

modbus_t *modbus_new_rtu(const char *device,int baud, char parity, int data_bit, int stop_bit)
/*以串口的方式创建libmodbus实例，使用完libmodbus需要释放掉 modbus_t *ctx:modbus实例
void modbus_free(modbus_t *ctx);

**********************************************读取*****************************************
int modbus_read_bits(modbus_t *ctx, int addr, int nb, uint8_t *dest)
/*读取线圈状态，可以读取多个连续线圈的状态 modbus_t *ctx:Modbus实例 int addr:线圈地址 int nb:读取线圈的个数 uint8_t *dest:传出去的状态值。*/

int modbus_read_input_bits(modbus_t *ctx, int addr, int nb, uint8_t *dest)
/*读取输入状态，可连续多个连续输入的状态 modbus_t *ctx:modbus实例 int add:输入地址 int nb:读取输入的个数 uint8_t *dest:传出的状态值

int modbus_read_input_registers(modbus_t *ctx, int addr, int nb, uint16_t *dest)
/* 读取输入寄存器的值，可读取多个连续输入寄存器 modbus_t *ctx:Modbus实例 int addr:输入地址 int nb:读取保持寄存器的个数， uint8_t *dest 传出去的值*/、

int modbus_read_registers(modbus_t *ctx, int addr, int nb, uint16_t *dest)
/*读取保持寄存器的值，可读取连续多个输入保持寄存器的
modbus_t *ctx:Modbus实例 int addr：输入地址 int nb:读取保持寄存器的个数 uint8_t *dest传出寄存器的值*/

********************************************写入************************************
/*写入单个线圈的状态 modbus_t *ctx :Modbus实例 int addr:线圈地址 int status:线圈状态
int modbus_write_bit(modbus_t *ctx, int addr, int status);

/*写多个连续线圈的状态
int modbus_write_bits()

/写入单个寄存器
int modbus_write_register()

/写入多个连续寄存器
int modbus_write_registers()

************************************************************************************
modbus RTU master
1.初始化modbus指针
2.设置ID
3.使用modbus_map_new初始化寄存器，返回一个modbus_mapping_t指针。 工程的数据需要存放到这个指针里
4.建立联系
5.调用modbus_receive函数，来轮询判断函数的接口数据。该函数不只是负责接收，还有处理，回复。

结构体：modbus_mapping_t数据结构的理解：
typedef struct {
    int nb_bits;
    int start_bits;
    int nb_input_bits;
    int start_input_bits;
    int nb_input_registers;
    int start_input_registers;
    int nb_registers;
    int start_registers;
    uint8_t *tab_bits;
    uint8_t *tab_input_bits;
    uint16_t *tab_input_registers;
    uint16_t *tab_registers;
} modbus_mapping_t
这个结构体包含：各种寄存器的个数，以及各种寄存器的数组指针，很明显，对于这个结构体的初始化，必然也是使用malloc申请一块专用内存，
将工程数据刷新存放在这块内存中。

对于初始化寄存器：modbus_mapping_new,内部调用的函数是:

modbus_mapping_t* modbus_mapping_new(int nb_bits, int nb_input_bits,
                                     int nb_registers, int nb_input_registers)
{
    return modbus_mapping_new_start_address(
        0, nb_bits, 0, nb_input_bits, 0, nb_registers, 0, nb_input_registers);
}
结构体：modbus_mapping_t中的四个数组：
   uint8_t *tab_bits;
    uint8_t *tab_input_bits;
    uint16_t *tab_input_registers;
    uint16_t *tab_registers;
来存储数据  存储位，输入位，（保持）寄存器，输入寄存器。



libmodbus设定的寄存器的起始地址都是从0开始的，这个一般情况下都是可以直接 使用的，
如果真要实现从非0开始，那就要应用程序里再调用一次modbus_mapping_new_start_address，设定想要的函数即可。

建立连接，在主循环中，调用modbus_receive(ctx，query),这个函数不仅仅是负责接口接收，而且还会对数据进行筛选，
根据主机的需要打包数据，返回相应数据给主机

退出modbus通信后，依然是先关闭 连接，比如关闭串口， 关闭socket。

释放modbus数据指针（内存区域）和modbus寄存器数据指针（内存区域）。
**********************************************************************************************************************

