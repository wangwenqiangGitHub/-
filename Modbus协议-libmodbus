modbus协议是应用于电子控制器上的一种通用语言，通过此协议，控制器之间，控制器经由网络（例如以太网）和其他设备之间可以通信。它已经是一种通用工业标准。
有了它，不同厂商的控制设备可以连接成工业网络，进行集中监控。此协议定义了一个控制器能认识使用的消息结构，而不管它们是经过何种网络进行通信的。他描述了一个
控制器请求访问其他设备的过程，如何回应来自其他设备的请求，以及怎样侦测错误并记录。它制定了消息域格局和内容的公共格式。
当在同一Modbus网络上通信时，此协议决定了每个控制器需要知道它们的设备地址，识别按地址发来的消息，决定要产生何种行动。如果需要回应，控制器将生成反馈
信息并用Modbus协议发出。在其它网络上，包含了Modbus协议的消息转换为在此网络上使用的帧或包结构。这种转换也扩展了根据具体的网络解决节地址、路由路径及
错误检测的方法。此协议支持传统的RS-232、RS-422、RS-485和以太网设备。许多工业设备，包括PLC，DCS，智能仪表等都在使用Modbus协议作为他们之间的通信标准
——————————*********************************************************************************************************-----------

https://blog.csdn.net/yoyo18520/article/details/79113700

libmodbus函数说明

*********************************************初始化与释放*********************************************
modbus_t *modbus_new_tcp(const char *ip, int port);
/*以TCP的方式创建libmodbus实例 char *ip:连接*p地址 int port:连接的IP端口；

modbus_t *modbus_new_rtu(const char *device,int baud, char parity, int data_bit, int stop_bit)
/*以串口的方式创建libmodbus实例，使用完libmodbus需要释放掉 modbus_t *ctx:modbus实例
void modbus_free(modbus_t *ctx);

**********************************************读取*****************************************
int modbus_read_bits(modbus_t *ctx, int addr, int nb, uint8_t *dest)
/*读取线圈状态，可以读取多个连续线圈的状态 modbus_t *ctx:Modbus实例 int addr:线圈地址 int nb:读取线圈的个数 uint8_t *dest:传出去的状态值。*/

int modbus_read_input_bits(modbus_t *ctx, int addr, int nb, uint8_t *dest)
/*读取输入状态，可连续多个连续输入的状态 modbus_t *ctx:modbus实例 int add:输入地址 int nb:读取输入的个数 uint8_t *dest:传出的状态值

int modbus_read_input_registers(modbus_t *ctx, int addr, int nb, uint16_t *dest)
/* 读取输入寄存器的值，可读取多个连续输入寄存器 modbus_t *ctx:Modbus实例 int addr:输入地址 int nb:读取保持寄存器的个数， uint8_t *dest 传出去的值*/、

int modbus_read_registers(modbus_t *ctx, int addr, int nb, uint16_t *dest)
/*读取保持寄存器的值，可读取连续多个输入保持寄存器的
modbus_t *ctx:Modbus实例 int addr：输入地址 int nb:读取保持寄存器的个数 uint8_t *dest传出寄存器的值*/

********************************************写入************************************
/*写入单个线圈的状态 modbus_t *ctx :Modbus实例 int addr:线圈地址 int status:线圈状态
int modbus_write_bit(modbus_t *ctx, int addr, int status);

/*写多个连续线圈的状态
int modbus_write_bits()

/写入单个寄存器
int modbus_write_register()

/写入多个连续寄存器
int modbus_write_registers()
